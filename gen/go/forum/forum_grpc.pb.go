// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: forum/forum.proto

package forumv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Forum_ListCategories_FullMethodName       = "/forum.Forum/ListCategories"
	Forum_GetCategoryByID_FullMethodName      = "/forum.Forum/GetCategoryByID"
	Forum_CreateTopic_FullMethodName          = "/forum.Forum/CreateTopic"
	Forum_GetTopicByID_FullMethodName         = "/forum.Forum/GetTopicByID"
	Forum_ListTopicsByCategory_FullMethodName = "/forum.Forum/ListTopicsByCategory"
	Forum_CreatePost_FullMethodName           = "/forum.Forum/CreatePost"
	Forum_ListPostsByTopic_FullMethodName     = "/forum.Forum/ListPostsByTopic"
	Forum_GetPostByID_FullMethodName          = "/forum.Forum/GetPostByID"
	Forum_ListPosts_FullMethodName            = "/forum.Forum/ListPosts"
	Forum_AddComment_FullMethodName           = "/forum.Forum/AddComment"
	Forum_ListCommentsByPost_FullMethodName   = "/forum.Forum/ListCommentsByPost"
	Forum_GetCommentByID_FullMethodName       = "/forum.Forum/GetCommentByID"
	Forum_ListTags_FullMethodName             = "/forum.Forum/ListTags"
	Forum_ListTagsByPostID_FullMethodName     = "/forum.Forum/ListTagsByPostID"
	Forum_CreateTag_FullMethodName            = "/forum.Forum/CreateTag"
	Forum_GetTagByID_FullMethodName           = "/forum.Forum/GetTagByID"
)

// ForumClient is the client API for Forum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumClient interface {
	// Категории
	ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	GetCategoryByID(ctx context.Context, in *GetCategoryByIDRequest, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error)
	// Темы
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	GetTopicByID(ctx context.Context, in *GetTopicByIDRequest, opts ...grpc.CallOption) (*GetTopicByIDResponse, error)
	ListTopicsByCategory(ctx context.Context, in *ListTopicsByCategoryRequest, opts ...grpc.CallOption) (*ListTopicsByCategoryResponse, error)
	// Посты
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	ListPostsByTopic(ctx context.Context, in *ListPostsByTopicRequest, opts ...grpc.CallOption) (*ListPostsByTopicResponse, error)
	GetPostByID(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error)
	// Комментарии
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	ListCommentsByPost(ctx context.Context, in *ListCommentsByPostRequest, opts ...grpc.CallOption) (*ListCommentsByPostResponse, error)
	GetCommentByID(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	// Теги
	ListTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTagsResponse, error)
	ListTagsByPostID(ctx context.Context, in *ListTagsByPostIDRequest, opts ...grpc.CallOption) (*ListTagsByPostIDResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	GetTagByID(ctx context.Context, in *GetTagByIDRequest, opts ...grpc.CallOption) (*GetTagByIDResponse, error)
}

type forumClient struct {
	cc grpc.ClientConnInterface
}

func NewForumClient(cc grpc.ClientConnInterface) ForumClient {
	return &forumClient{cc}
}

func (c *forumClient) ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, Forum_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetCategoryByID(ctx context.Context, in *GetCategoryByIDRequest, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoryByIDResponse)
	err := c.cc.Invoke(ctx, Forum_GetCategoryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, Forum_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetTopicByID(ctx context.Context, in *GetTopicByIDRequest, opts ...grpc.CallOption) (*GetTopicByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopicByIDResponse)
	err := c.cc.Invoke(ctx, Forum_GetTopicByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ListTopicsByCategory(ctx context.Context, in *ListTopicsByCategoryRequest, opts ...grpc.CallOption) (*ListTopicsByCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicsByCategoryResponse)
	err := c.cc.Invoke(ctx, Forum_ListTopicsByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, Forum_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ListPostsByTopic(ctx context.Context, in *ListPostsByTopicRequest, opts ...grpc.CallOption) (*ListPostsByTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPostsByTopicResponse)
	err := c.cc.Invoke(ctx, Forum_ListPostsByTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetPostByID(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, Forum_GetPostByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPostsResponse)
	err := c.cc.Invoke(ctx, Forum_ListPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, Forum_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ListCommentsByPost(ctx context.Context, in *ListCommentsByPostRequest, opts ...grpc.CallOption) (*ListCommentsByPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentsByPostResponse)
	err := c.cc.Invoke(ctx, Forum_ListCommentsByPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetCommentByID(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, Forum_GetCommentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ListTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, Forum_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ListTagsByPostID(ctx context.Context, in *ListTagsByPostIDRequest, opts ...grpc.CallOption) (*ListTagsByPostIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsByPostIDResponse)
	err := c.cc.Invoke(ctx, Forum_ListTagsByPostID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, Forum_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetTagByID(ctx context.Context, in *GetTagByIDRequest, opts ...grpc.CallOption) (*GetTagByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagByIDResponse)
	err := c.cc.Invoke(ctx, Forum_GetTagByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumServer is the server API for Forum service.
// All implementations must embed UnimplementedForumServer
// for forward compatibility.
type ForumServer interface {
	// Категории
	ListCategories(context.Context, *Empty) (*ListCategoriesResponse, error)
	GetCategoryByID(context.Context, *GetCategoryByIDRequest) (*GetCategoryByIDResponse, error)
	// Темы
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	GetTopicByID(context.Context, *GetTopicByIDRequest) (*GetTopicByIDResponse, error)
	ListTopicsByCategory(context.Context, *ListTopicsByCategoryRequest) (*ListTopicsByCategoryResponse, error)
	// Посты
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	ListPostsByTopic(context.Context, *ListPostsByTopicRequest) (*ListPostsByTopicResponse, error)
	GetPostByID(context.Context, *GetPostRequest) (*GetPostResponse, error)
	ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error)
	// Комментарии
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	ListCommentsByPost(context.Context, *ListCommentsByPostRequest) (*ListCommentsByPostResponse, error)
	GetCommentByID(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	// Теги
	ListTags(context.Context, *Empty) (*ListTagsResponse, error)
	ListTagsByPostID(context.Context, *ListTagsByPostIDRequest) (*ListTagsByPostIDResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	GetTagByID(context.Context, *GetTagByIDRequest) (*GetTagByIDResponse, error)
	mustEmbedUnimplementedForumServer()
}

// UnimplementedForumServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForumServer struct{}

func (UnimplementedForumServer) ListCategories(context.Context, *Empty) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedForumServer) GetCategoryByID(context.Context, *GetCategoryByIDRequest) (*GetCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryByID not implemented")
}
func (UnimplementedForumServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedForumServer) GetTopicByID(context.Context, *GetTopicByIDRequest) (*GetTopicByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicByID not implemented")
}
func (UnimplementedForumServer) ListTopicsByCategory(context.Context, *ListTopicsByCategoryRequest) (*ListTopicsByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopicsByCategory not implemented")
}
func (UnimplementedForumServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedForumServer) ListPostsByTopic(context.Context, *ListPostsByTopicRequest) (*ListPostsByTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostsByTopic not implemented")
}
func (UnimplementedForumServer) GetPostByID(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (UnimplementedForumServer) ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (UnimplementedForumServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedForumServer) ListCommentsByPost(context.Context, *ListCommentsByPostRequest) (*ListCommentsByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentsByPost not implemented")
}
func (UnimplementedForumServer) GetCommentByID(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByID not implemented")
}
func (UnimplementedForumServer) ListTags(context.Context, *Empty) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedForumServer) ListTagsByPostID(context.Context, *ListTagsByPostIDRequest) (*ListTagsByPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTagsByPostID not implemented")
}
func (UnimplementedForumServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedForumServer) GetTagByID(context.Context, *GetTagByIDRequest) (*GetTagByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagByID not implemented")
}
func (UnimplementedForumServer) mustEmbedUnimplementedForumServer() {}
func (UnimplementedForumServer) testEmbeddedByValue()               {}

// UnsafeForumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumServer will
// result in compilation errors.
type UnsafeForumServer interface {
	mustEmbedUnimplementedForumServer()
}

func RegisterForumServer(s grpc.ServiceRegistrar, srv ForumServer) {
	// If the following call pancis, it indicates UnimplementedForumServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Forum_ServiceDesc, srv)
}

func _Forum_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ListCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_GetCategoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetCategoryByID(ctx, req.(*GetCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetTopicByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetTopicByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_GetTopicByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetTopicByID(ctx, req.(*GetTopicByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ListTopicsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ListTopicsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_ListTopicsByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ListTopicsByCategory(ctx, req.(*ListTopicsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ListPostsByTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsByTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ListPostsByTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_ListPostsByTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ListPostsByTopic(ctx, req.(*ListPostsByTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_GetPostByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetPostByID(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_ListPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ListPosts(ctx, req.(*ListPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ListCommentsByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsByPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ListCommentsByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_ListCommentsByPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ListCommentsByPost(ctx, req.(*ListCommentsByPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetCommentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetCommentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_GetCommentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetCommentByID(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ListTags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ListTagsByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsByPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ListTagsByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_ListTagsByPostID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ListTagsByPostID(ctx, req.(*ListTagsByPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetTagByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetTagByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forum_GetTagByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetTagByID(ctx, req.(*GetTagByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forum_ServiceDesc is the grpc.ServiceDesc for Forum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forum.Forum",
	HandlerType: (*ForumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCategories",
			Handler:    _Forum_ListCategories_Handler,
		},
		{
			MethodName: "GetCategoryByID",
			Handler:    _Forum_GetCategoryByID_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Forum_CreateTopic_Handler,
		},
		{
			MethodName: "GetTopicByID",
			Handler:    _Forum_GetTopicByID_Handler,
		},
		{
			MethodName: "ListTopicsByCategory",
			Handler:    _Forum_ListTopicsByCategory_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Forum_CreatePost_Handler,
		},
		{
			MethodName: "ListPostsByTopic",
			Handler:    _Forum_ListPostsByTopic_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _Forum_GetPostByID_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _Forum_ListPosts_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _Forum_AddComment_Handler,
		},
		{
			MethodName: "ListCommentsByPost",
			Handler:    _Forum_ListCommentsByPost_Handler,
		},
		{
			MethodName: "GetCommentByID",
			Handler:    _Forum_GetCommentByID_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _Forum_ListTags_Handler,
		},
		{
			MethodName: "ListTagsByPostID",
			Handler:    _Forum_ListTagsByPostID_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Forum_CreateTag_Handler,
		},
		{
			MethodName: "GetTagByID",
			Handler:    _Forum_GetTagByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forum/forum.proto",
}
