syntax = "proto3";

package auth;

option go_package = "tuzov.sso.v1;ssov1";

// Auth is service for managing permissions and roles.
service Auth {
   // Register registers a new user.
   rpc Register (RegisterRequest) returns (RegisterResponse);
   // Login logs in a user and returns an auth token.
   rpc Login (LoginRequest) returns (LoginResponse);
   // IsAdmin checks for admin and returns a boolean.
   rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse);
   rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
}
message ValidateTokenRequest {
  string token = 1;
}
message RegisterRequest {
   string email = 1; // Email of the user to register.
   string password = 2; // Password of the user to register.
}

message RegisterResponse {
   int64 user_id = 1; // User ID of the registered user.
}
message ValidateTokenResponse {
  bool valid = 1; // Indicates whether the token is valid
  int64 user_id = 2; // ID of the user associated with the token
  string role = 3;    // Role of the user (e.g., "admin", "user")
}
message LoginRequest {
   string email = 1; // Email of the user to login. 
   string password = 2; // Password of the user to login. 
   int32 app_id = 3; // ID of the app to login to.
}

message LoginResponse {
    string token = 1; // Auth token of the logged in user.
}
message IsAdminRequest {
    int64 user_id = 1; // User ID to validate
}

message IsAdminResponse {
    bool is_admin = 1; // Indicates whether the user is admin
}
// Создание администратора
message CreateAdminRequest {
  string email = 1; 
  string password = 2; 
  int64 requesting_user_id = 3; // ID пользователя, который запрашивает действие
}

message CreateAdminResponse {
  int64 user_id = 1;
}

// Блокировка пользователя (опционально)
message BanUserRequest {
  int64 user_id = 1;
  int64 requesting_user_id = 2;
  string reason = 3;
}

message BanUserResponse {
  bool success = 1;
}